#include <linux/kernel.h>   
#include <linux/init.h>   
#include <linux/module.h>   
#include <linux/sched.h>

//MODULE_LICENCE("GPL");

#define 	MY_SIZE  (THREAD_SIZE/(sizeof(int)))
#if 0
static int __init hello_init(void)   
{  
    
	int i = 0;
    int  a[THREAD_SIZE];
   
 
    printk(KERN_ALERT "hello_init, world! from kernel space, a[190000] = %d....\n", a[0]);

	printk(KERN_EMERG "my stack is %p..%p\n",
		 current->stack,
		 (char *)current->stack + THREAD_SIZE - 1);
    
    return 0; 
	
    //for (i = 0; i < 4096*12000; i++)
    for (i = 0; i <MY_SIZE; i++)
    {
           printk(KERN_ALERT "hello_init write %u int \r\n", i);
           a[i] = 999999999;
           printk(KERN_ALERT "hello_init write %u int ok %u\r\n", i, a[i]);
    }
    return 0; 
	
    a[190000] = 100;  
    printk(KERN_ALERT "Hello, world! from kernel space, a[190000] = %d after ....\n", a[190000]);
    a[4096/4] = 100;
    a[4096/4 + 2] = 100;
    a[4096/2] = 100;
    a[4096/2 + 1] = 100;
    a[4096 + 2] = 100;

    printk(KERN_ALERT "Hello, world! from kernel space, a[190000] = %d after ....\n", a[190000]);
    return 0;   
}    
#endif

static int __init hello_init(void)   
{  
    
    int  a[20];
    int i = 0; 

 
    printk(KERN_ALERT "hello_init, world! from kernel space, a[190000] = %d....\n", a[0]);
	printk(KERN_EMERG "my stack is %p..%p\n",
		 current->stack,
		 (char *)current->stack + THREAD_SIZE - 1);
	dump_stack();
    
   // return 0; 
	
    for (i = 0; i < 500000; i++)
    {
           printk(KERN_ALERT "hello_init write %u int \r\n", i);
           a[i] = 999999999;
           printk(KERN_ALERT "hello_init write %u int ok %u\r\n", i, a[i]);
    }

	printk(KERN_ALERT "hello_init, world! from kernel space, a[190000] = %d, i = %u....\n", a[0], i);
    return 0; 

	
	/*
    a[190000] = 100;  
    printk(KERN_ALERT "Hello, world! from kernel space, a[190000] = %d after ....\n", a[190000]);
    a[4096/4] = 100;
    a[4096/4 + 2] = 100;
    a[4096/2] = 100;
    a[4096/2 + 1] = 100; 
    a[4096 + 2] = 100;

    printk(KERN_ALERT "Hello, world! from kernel space, a[190000] = %d after ....\n", a[190000]);
    return 0;  
	*/
}   

static void __exit hello_exit(void)   
{   
	int  a[200000];
	int i = 0;

    printk(KERN_ALERT "hello_exit, world! Leaving kernel space....\n");   

	return;
	for (i = 0; i < 4096*12000; i++)
    {
           printk(KERN_ALERT "hello_exit write %u int \r\n", i);
           a[i] = 999999999;
           printk(KERN_ALERT "hello_exit write %u int ok %u\r\n", i, a[i]);
    }
}   
module_init(hello_init);   
module_exit(hello_exit); 

