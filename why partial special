http://m.blog.csdn.net/songshimvp1/article/details/49385019





编程语言
 
img songshiMVP1
Traits 编程技法+模板偏特化+template参数推导+内嵌型别编程技巧
发表于2015/10/24 15:00:10  510人阅读

分类： 《STL源码剖析》

STL中，traits编程技法得到了很大的应用，了解这个，才能一窥STL奥妙所在。

先将自己所理解的记录如下：

Traits技术可以用来获得一个 类型 的相关信息的。 首先假如有以下一个泛型的迭代器类，其中类型参数 T 为迭代器所指向的类型：

template <typename T>
class myIterator
{
 ...
};

当我们使用myIterator时，怎样才能获知它所指向的元素的类型呢？我们可以为这个类加入一个内嵌类型，像这样：
template <typename T>
class myIterator
{
      typedef  T value_type; 
...
};
这样当我们使用myIterator类型时，可以通过 myIterator::value_type来获得相应的myIterator所指向的类型。

现在我们来设计一个算法，使用这个信息。
template <typename T>
typename myIterator<T>::value_type Foo(myIterator<T> i)
{
 ...
}
这里我们定义了一个函数Foo，它的返回为为  参数i 所指向的类型，也就是T，那么我们为什么还要兴师动众的使用那个value_type呢？ 那是因为，当我们希望修改Foo函数，使它能够适应所有类型的迭代器时，我们可以这样写：
template <typename I> //这里的I可以是任意类型的迭代器
typename I::value_type Foo(I i)
{
 ...
}
现在，任意定义了 value_type内嵌类型的迭代器都可以做为Foo的参数了，并且Foo的返回值的类型将与相应迭代器所指的元素的类型一致。至此一切问题似乎都已解决，我们并没有使用任何特殊的技术。然而当考虑到以下情况时，新的问题便显现出来了：

       原生指针也完全可以做为迭代器来使用，然而我们显然没有办法为原生指针添加一个value_type的内嵌类型，如此一来我们的Foo()函数就不能适用原 生指针了，这不能不说是一大缺憾。那么有什么办法可以解决这个问题呢？ 此时便是我们的主角：类型信息榨取机 Traits 登场的时候了

....drum roll......

我们可以不直接使用myIterator的value_type，而是通过另一个类来把这个信息提取出来：
template <typename T>
class Traits
{
      typedef typename T::value_type value_type;
};
这样，我们可以通过 Traits<myIterator>::value_type 来获得myIterator的value_type，于是我们把Foo函数改写成：
template <typename I> //这里的I可以是任意类型的迭代器
typename Traits<I>::value_type Foo(I i)
{
 ...
}
然而，即使这样，那个原生指针的问题仍然没有解决，因为Trait类一样没办法获得原生指针的相关信息。于是我们祭出C++的又一件利器--偏特化(partial specialization)：
template <typename T>
class Traits<T*> //注意 这里针对原生指针进行了偏特化
{
      typedef typename T value_type;
};
通过上面这个 Traits的偏特化版本，我们陈述了这样一个事实：一个 T* 类型的指针所指向的元素的类型为 T。

如此一来，我们的 Foo函数就完全可以适用于原生指针了。比如：
int * p;
....
int i = Foo(p);
Traits会自动推导出 p 所指元素的类型为 int，从而Foo正确返回。



过程：内嵌型别->traite类->模板偏特化=>可萃取原生指针的value type。





本文版权归作者 kanego 和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利.
0 0
上一篇 下一篇

相关文章推荐
篮子、水果和鸡蛋——关于C++的模板偏特化和萃取编程技法
 markman101 2014-04-17 09:57977
关于C++的模板偏特化和萃取编程技法
 CSDNJACK_ 2015-08-28 09:22493

二 迭代器（四）迭代器相应型别及traits编程技法
 first_wolf 2013-03-10 20:49656
模板偏特化 and traits机制
 derkampf 2017-06-21 20:23119
C++泛型编程1——函数模板实例化，模板参数，重载及特化
 lixungogogo 2016-08-13 02:091957

C++的模板特化及STL中iterator_traits模板的偏特化
 timewalker08 2012-01-12 11:342843
三 迭代器（iterator）概念与traits编程技法
 yuyixinye 2014-09-10 16:37478
STL笔记（7）——Traits编程技法（二）
 zhangxiao93 2016-04-06 22:59550
查看更多
暂无评论，我去发表~
 未登录
•首页
•人工智能
•移动开发
•物联网
•架构
•云计算/大数据
•互联网
•游戏开发
•运维
•数据库
•前端
•后端
•编程语言
•研发管理
•安全
•程序人生
•区块链
•音视频开发
•资讯
•计算机理论与基础
•综合
©1999-2012, csdn.net, All Rights Reserved

